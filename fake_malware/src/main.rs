use std::{fs, io};
use std::path::{Path, PathBuf};
use sha2::{Sha256, Digest};
use hex;

fn hash_file(file_path: &Path) -> io::Result<String> {
    let mut file = fs::File::open(file_path)?;
    let mut hasher = Sha256::new();
    io::copy(&mut file, &mut hasher)?;
    Ok(hex::encode(hasher.finalize()))
}

fn process_directory(dir: &Path, revert: bool) -> io::Result<()> {
    for entry in fs::read_dir(dir)? {
        let entry = entry?;
        let path = entry.path();
        if path.is_file() {
            if revert {
                if let Some(extension) = path.extension() {
                    if extension == "malw" {
                        let new_path = path.with_extension("");
                        fs::rename(&path, &new_path)?;
                        println!("Reverted: {:?}", new_path);
                    }
                }
            } else {
                let hash = hash_file(&path)?;
                let new_path = path.with_extension("malw");
                fs::rename(&path, &new_path)?;
                println!("Processed: {:?}, Hash: {}", new_path, hash);
            }
        }
    }
    Ok(())
}

fn main() -> io::Result<()> {
    let dir = Path::new("your_directory_here");
    process_directory(dir, false)?; // Set to true to revert

    Ok(())
}
